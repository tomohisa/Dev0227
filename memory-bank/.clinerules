# Sekiban Testing Guidelines

## Domain Testing Patterns

1. **Use SekibanInMemoryTestBase for Domain Tests**
   - Inherit from `SekibanInMemoryTestBase` for domain unit tests
   - Override `GetDomainTypes()` to provide domain types
   - Use `SchoolManagementDomainDomainTypes.Generate()` from the Generated namespace

2. **Follow Given-When-Then Pattern**
   - Use `GivenCommand()` for initial setup
   - Use `WhenCommand()` for the action being tested
   - Use `ThenGetAggregate<TProjector>()` to verify the result
   - Use `ThenQuery()` to verify query results

3. **Test Command Behavior**
   - Verify commands produce the expected events
   - Check event version numbers
   - Verify aggregate state after command execution
   - Test both success and failure scenarios

4. **Test Projector Behavior**
   - Verify events are correctly applied by projectors
   - Test state transitions between different aggregate types
   - Verify property values after projection

5. **Test Relationships**
   - Verify bidirectional relationships are maintained
   - Test adding and removing relationships
   - Check for proper cleanup when entities are deleted

## Namespace Considerations

1. **Required Imports**
   ```csharp
   using Sekiban.Pure.xUnit;
   using Xunit;
   using System;
   using SchoolManagement.Domain;
   using SchoolManagement.Domain.Generated;
   using Sekiban.Pure;
   ```

2. **Source Generation**
   - Sekiban generates domain types at build time
   - Always use the generated `SchoolManagementDomainDomainTypes` class
   - Don't create custom domain type classes for testing

## Test Organization

1. **Separate Test Classes by Entity**
   - StudentTests for Student entity
   - TeacherTests for Teacher entity
   - ClassTests for Class entity
   - RelationshipTests for cross-entity relationships

2. **Descriptive Test Names**
   - Use format: `[Action]_Should[ExpectedResult]`
   - Example: `RegisterStudent_ShouldCreateStudent`
   - Example: `DeleteStudent_ShouldChangeStateToDeletedStudent`

3. **Test Structure**
   - Arrange: Set up initial state with commands
   - Act: Execute the command being tested
   - Assert: Verify the expected outcome

## Common Mistakes to Avoid

1. **Namespace Errors**
   - Missing `SchoolManagement.Domain.Generated` namespace
   - Not importing `Sekiban.Pure` for SekibanDomainTypes

2. **Domain Type Errors**
   - Trying to create custom domain types instead of using generated ones
   - Using wrong constructor parameters for SekibanDomainTypes

3. **Test Structure Issues**
   - Not following the Given-When-Then pattern
   - Not verifying both command execution and resulting state
   - Not testing edge cases and error scenarios

## Sekiban Source Generation Insights

1. **Understanding SchoolManagementDomainDomainTypes**
   - This class is automatically generated by Sekiban.Pure.SourceGenerator
   - The naming convention is [ProjectName]DomainTypes (e.g., SchoolManagementDomainDomainTypes)
   - It's generated in the [ProjectName].Generated namespace
   - It contains all the domain type information needed for Sekiban to work

2. **What I Wish I Knew About Source Generation**
   - The Generated namespace is created at build time, not visible in the source code
   - No need to create your own domain types class for testing
   - The Generate() method has two overloads:
     - `Generate()` - No parameters version for serialization checking
     - `Generate(JsonSerializerOptions options)` - For actual domain type registration
   - Always reference the source-generated types directly in tests

3. **Debugging Source Generation**
   - If you can't find the generated types, check the build output
   - Make sure the project builds successfully before running tests
   - The source generator requires all domain types to be properly decorated with attributes
   - Look for the Generated namespace in the compiled assembly, not in source files

4. **Documentation Improvements**
   - Clearer explanation of source generation in Sekiban
   - Examples of how to reference generated types in tests
   - Explanation of naming conventions for generated types
   - Troubleshooting guide for common source generation issues
