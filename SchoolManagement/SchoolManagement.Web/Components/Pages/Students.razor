@page "/students"
@attribute [StreamRendering(true)]

@using SchoolManagement.Domain
@using System.ComponentModel.DataAnnotations

@inject StudentApiClient StudentApi
@inject ClassApiClient ClassApi
@inject IJSRuntime JsRuntime

<PageTitle>Students</PageTitle>

<h1>Students</h1>

<div class="mb-3">
    <div class="row g-3">
        <div class="col-md-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by name" @bind="nameFilter" @bind:event="oninput" />
                <button class="btn btn-outline-secondary" type="button" @onclick="ApplyFilters">Search</button>
            </div>
        </div>
        <div class="col-md-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by student ID" @bind="studentIdFilter" @bind:event="oninput" />
                <button class="btn btn-outline-secondary" type="button" @onclick="ApplyFilters">Search</button>
            </div>
        </div>
        <div class="col-md-4">
            <button class="btn btn-primary" @onclick="OpenAddStudentModal">Add New Student</button>
        </div>
    </div>
</div>

<h3>Student List</h3>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else if (!students.Any())
{
    <p>No students found. Add a new student to get started.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Student ID</th>
                    <th>Age</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Class</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in students)
                {
                    <tr>
                        <td>@student.Name</td>
                        <td>@student.StudentIdNumber</td>
                        <td>@student.Age</td>
                        <td>@student.Email</td>
                        <td>@student.PhoneNumber</td>
                        <td>
                            @if (student.ClassId.HasValue)
                            {
                                var className = GetClassName(student.ClassId.Value);
                                @className
                            }
                            else
                            {
                                <span class="text-muted">Not assigned</span>
                            }
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-primary" @onclick="() => OpenEditStudentModal(student)">Edit</button>
                                <button class="btn btn-sm btn-info" @onclick="() => OpenAssignClassModal(student)">Assign Class</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => HandleDeleteStudent(student.StudentId)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Add Student Modal -->
<div class="modal fade" id="addStudentModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="addStudentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm FormName="add-student" Model="@studentModel" OnValidSubmit="HandleAddStudentSubmit">
                <div class="modal-header">
                    <h5 class="modal-title" id="addStudentModalLabel">Add Student</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddStudentModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="studentModel.Name" />
                        <ValidationMessage For="@(() => studentModel.Name)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="studentId" class="form-label">Student ID</label>
                        <InputText id="studentId" class="form-control" @bind-Value="studentModel.StudentId" />
                        <ValidationMessage For="@(() => studentModel.StudentId)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="dateOfBirth" class="form-label">Date of Birth</label>
                        <InputDate id="dateOfBirth" class="form-control" @bind-Value="studentModel.DateOfBirth" />
                        <ValidationMessage For="@(() => studentModel.DateOfBirth)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="studentModel.Email" />
                        <ValidationMessage For="@(() => studentModel.Email)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="phoneNumber" class="form-label">Phone Number</label>
                        <InputText id="phoneNumber" class="form-control" @bind-Value="studentModel.PhoneNumber" />
                        <ValidationMessage For="@(() => studentModel.PhoneNumber)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="address" class="form-label">Address</label>
                        <InputTextArea id="address" class="form-control" @bind-Value="studentModel.Address" />
                        <ValidationMessage For="@(() => studentModel.Address)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrEmpty(studentModel.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @studentModel.Error
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddStudentModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Student</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Edit Student Modal -->
<div class="modal fade" id="editStudentModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="editStudentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm FormName="edit-student" Model="@editStudentModel" OnValidSubmit="HandleEditStudentSubmit">
                <div class="modal-header">
                    <h5 class="modal-title" id="editStudentModalLabel">Edit Student</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditStudentModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="editName" class="form-label">Name</label>
                        <InputText id="editName" class="form-control" @bind-Value="editStudentModel.Name" />
                        <ValidationMessage For="@(() => editStudentModel.Name)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="editEmail" class="form-label">Email</label>
                        <InputText id="editEmail" class="form-control" @bind-Value="editStudentModel.Email" />
                        <ValidationMessage For="@(() => editStudentModel.Email)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="editPhoneNumber" class="form-label">Phone Number</label>
                        <InputText id="editPhoneNumber" class="form-control" @bind-Value="editStudentModel.PhoneNumber" />
                        <ValidationMessage For="@(() => editStudentModel.PhoneNumber)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="editAddress" class="form-label">Address</label>
                        <InputTextArea id="editAddress" class="form-control" @bind-Value="editStudentModel.Address" />
                        <ValidationMessage For="@(() => editStudentModel.Address)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrEmpty(editStudentModel.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @editStudentModel.Error
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditStudentModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Assign Class Modal -->
<div class="modal fade" id="assignClassModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="assignClassModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm FormName="assign-class" Model="@assignClassModel" OnValidSubmit="HandleAssignClassSubmit">
                <div class="modal-header">
                    <h5 class="modal-title" id="assignClassModalLabel">Assign Class</h5>
                    <button type="button" class="btn-close" @onclick="CloseAssignClassModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="classId" class="form-label">Class</label>
                        <InputSelect id="classId" class="form-select" @bind-Value="assignClassModel.ClassId">
                            <option value="">Select a class...</option>
                            @if (classes != null)
                            {
                                @foreach (var classItem in classes)
                                {
                                    <option value="@classItem.ClassId">@classItem.Name (@classItem.ClassCode)</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => assignClassModel.ClassId)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrEmpty(assignClassModel.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @assignClassModel.Error
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAssignClassModal">Cancel</button>
                    @if (assignClassModel.CurrentClassId.HasValue)
                    {
                        <button type="button" class="btn btn-warning" @onclick="HandleRemoveFromClassSubmit">Remove from Class</button>
                    }
                    <button type="submit" class="btn btn-primary">Assign to Class</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<script>
    function DisplayAddStudentModal(param) {
        var modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('addStudentModal'));
        if (param === 'show') {
            modal.show();
        } else {
            modal.hide();
        }
    }
    function DisplayEditStudentModal(param) {
        var modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('editStudentModal'));
        if (param === 'show') {
            modal.show();
        } else {
            modal.hide();
        }
    }
    function DisplayAssignClassModal(param) {
        var modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('assignClassModal'));
        if (param === 'show') {
            modal.show();
        } else {
            modal.hide();
        }
    }
</script>

@code {
    private StudentQuery.StudentRecord[]? students;
    private ClassQuery.ClassRecord[]? classes;
    private string nameFilter = "";
    private string studentIdFilter = "";
    private StudentModel studentModel = new();
    private EditStudentModel editStudentModel = new();
    private AssignClassModel assignClassModel = new();
    private Dictionary<Guid, string> classNames = new();

    public class StudentModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Student ID is required")]
        public string StudentId { get; set; } = "";

        [Required(ErrorMessage = "Date of birth is required")]
        public DateTime DateOfBirth { get; set; } = DateTime.Today.AddYears(-18);

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Phone number is required")]
        public string PhoneNumber { get; set; } = "";

        [Required(ErrorMessage = "Address is required")]
        public string Address { get; set; } = "";

        public string? Error { get; set; }
    }

    public class EditStudentModel
    {
        public Guid StudentId { get; set; }

        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Phone number is required")]
        public string PhoneNumber { get; set; } = "";

        [Required(ErrorMessage = "Address is required")]
        public string Address { get; set; } = "";

        public string? Error { get; set; }
    }

    public class AssignClassModel
    {
        public Guid StudentId { get; set; }
        public string StudentName { get; set; } = "";
        public Guid? CurrentClassId { get; set; }

        [Required(ErrorMessage = "Class is required")]
        public string ClassId { get; set; } = "";

        public string? Error { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
        await LoadClasses();
    }

    private async Task LoadStudents()
    {
        students = await StudentApi.GetStudentsAsync(nameFilter, studentIdFilter);
    }

    private async Task LoadClasses()
    {
        classes = await ClassApi.GetClassesAsync();
        classNames.Clear();
        if (classes != null)
        {
            foreach (var classItem in classes)
            {
                classNames[classItem.ClassId] = $"{classItem.Name} ({classItem.ClassCode})";
            }
        }
    }

    private string GetClassName(Guid classId)
    {
        if (classNames.TryGetValue(classId, out var name))
        {
            return name;
        }
        return "Unknown Class";
    }

    private async Task ApplyFilters()
    {
        await LoadStudents();
    }

    private async Task OpenAddStudentModal()
    {
        studentModel = new StudentModel();
        await JsRuntime.InvokeVoidAsync("DisplayAddStudentModal", "show");
    }

    private async Task CloseAddStudentModal()
    {
        studentModel = new StudentModel();
        await JsRuntime.InvokeVoidAsync("DisplayAddStudentModal", "hide");
    }

    private async Task OpenEditStudentModal(StudentQuery.StudentRecord student)
    {
        editStudentModel = new EditStudentModel
        {
            StudentId = student.StudentId,
            Name = student.Name,
            Email = student.Email,
            PhoneNumber = student.PhoneNumber,
            Address = student.Address
        };
        await JsRuntime.InvokeVoidAsync("DisplayEditStudentModal", "show");
    }

    private async Task CloseEditStudentModal()
    {
        editStudentModel = new EditStudentModel();
        await JsRuntime.InvokeVoidAsync("DisplayEditStudentModal", "hide");
    }

    private async Task OpenAssignClassModal(StudentQuery.StudentRecord student)
    {
        assignClassModel = new AssignClassModel
        {
            StudentId = student.StudentId,
            StudentName = student.Name,
            CurrentClassId = student.ClassId,
            ClassId = student.ClassId?.ToString() ?? ""
        };
        await JsRuntime.InvokeVoidAsync("DisplayAssignClassModal", "show");
    }

    private async Task CloseAssignClassModal()
    {
        assignClassModel = new AssignClassModel();
        await JsRuntime.InvokeVoidAsync("DisplayAssignClassModal", "hide");
    }

    private async Task HandleAddStudentSubmit()
    {
        try
        {
            await StudentApi.RegisterStudentAsync(
                studentModel.Name,
                studentModel.StudentId,
                studentModel.DateOfBirth,
                studentModel.Email,
                studentModel.PhoneNumber,
                studentModel.Address);

            await LoadStudents();
            await CloseAddStudentModal();
        }
        catch (Exception ex)
        {
            studentModel.Error = $"Failed to add student: {ex.Message}";
        }
    }

    private async Task HandleEditStudentSubmit()
    {
        try
        {
            await StudentApi.UpdateStudentAsync(
                editStudentModel.StudentId,
                editStudentModel.Name,
                editStudentModel.Email,
                editStudentModel.PhoneNumber,
                editStudentModel.Address);

            await LoadStudents();
            await CloseEditStudentModal();
        }
        catch (Exception ex)
        {
            editStudentModel.Error = $"Failed to update student: {ex.Message}";
        }
    }

    private async Task HandleDeleteStudent(Guid studentId)
    {
        try
        {
            await StudentApi.DeleteStudentAsync(studentId);
            await LoadStudents();
        }
        catch (Exception ex)
        {
            // Show error message
            Console.Error.WriteLine($"Error deleting student: {ex.Message}");
        }
    }

    private async Task HandleAssignClassSubmit()
    {
        try
        {
            if (Guid.TryParse(assignClassModel.ClassId, out var classId))
            {
                await StudentApi.AssignStudentToClassAsync(assignClassModel.StudentId, classId);
                await LoadStudents();
                await CloseAssignClassModal();
            }
            else
            {
                assignClassModel.Error = "Invalid class selection";
            }
        }
        catch (Exception ex)
        {
            assignClassModel.Error = $"Failed to assign class: {ex.Message}";
        }
    }

    private async Task HandleRemoveFromClassSubmit()
    {
        try
        {
            await StudentApi.RemoveStudentFromClassAsync(assignClassModel.StudentId);
            await LoadStudents();
            await CloseAssignClassModal();
        }
        catch (Exception ex)
        {
            assignClassModel.Error = $"Failed to remove from class: {ex.Message}";
        }
    }
}
