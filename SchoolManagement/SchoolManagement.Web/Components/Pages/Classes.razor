@page "/classes"
@attribute [StreamRendering(true)]

@using SchoolManagement.Domain
@using System.ComponentModel.DataAnnotations

@inject ClassApiClient ClassApi
@inject StudentApiClient StudentApi
@inject TeacherApiClient TeacherApi
@inject IJSRuntime JsRuntime

<PageTitle>Classes</PageTitle>

<h1>Classes</h1>

<div class="mb-3">
    <div class="row g-3">
        <div class="col-md-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by name" @bind="nameFilter" @bind:event="oninput" />
                <button class="btn btn-outline-secondary" type="button" @onclick="ApplyFilters">Search</button>
            </div>
        </div>
        <div class="col-md-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by class code" @bind="classCodeFilter" @bind:event="oninput" />
                <button class="btn btn-outline-secondary" type="button" @onclick="ApplyFilters">Search</button>
            </div>
        </div>
        <div class="col-md-4">
            <button class="btn btn-primary" @onclick="OpenAddClassModal">Add New Class</button>
        </div>
    </div>
</div>

<h3>Class List</h3>

@if (classes == null)
{
    <p><em>Loading...</em></p>
}
else if (!classes.Any())
{
    <p>No classes found. Add a new class to get started.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Class Code</th>
                    <th>Description</th>
                    <th>Teacher</th>
                    <th>Students</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var classItem in classes)
                {
                    <tr>
                        <td>@classItem.Name</td>
                        <td>@classItem.ClassCode</td>
                        <td>@classItem.Description</td>
                        <td>
                            @if (classItem.TeacherId.HasValue)
                            {
                                var teacherName = GetTeacherName(classItem.TeacherId.Value);
                                @teacherName
                            }
                            else
                            {
                                <span class="text-muted">Not assigned</span>
                            }
                        </td>
                        <td>@classItem.StudentIds.Length</td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-primary" @onclick="() => OpenEditClassModal(classItem)">Edit</button>
                                <button class="btn btn-sm btn-info" @onclick="() => OpenManageClassModal(classItem)">Manage</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => HandleDeleteClass(classItem.ClassId)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Add Class Modal -->
<div class="modal fade" id="addClassModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="addClassModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen-md-down modal-dialog-centered modal-lg">
        <div class="modal-content">
            <EditForm FormName="add-class" Model="@classModel" OnValidSubmit="HandleAddClassSubmit">
                <div class="modal-header">
                    <h5 class="modal-title" id="addClassModalLabel">Add Class</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddClassModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="classModel.Name" />
                        <ValidationMessage For="@(() => classModel.Name)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="classCode" class="form-label">Class Code</label>
                        <InputText id="classCode" class="form-control" @bind-Value="classModel.ClassCode" />
                        <ValidationMessage For="@(() => classModel.ClassCode)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="classModel.Description" />
                        <ValidationMessage For="@(() => classModel.Description)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrEmpty(classModel.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @classModel.Error
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddClassModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Class</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Edit Class Modal -->
<div class="modal fade" id="editClassModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="editClassModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen-md-down modal-dialog-centered modal-lg">
        <div class="modal-content">
            <EditForm FormName="edit-class" Model="@editClassModel" OnValidSubmit="HandleEditClassSubmit">
                <div class="modal-header">
                    <h5 class="modal-title" id="editClassModalLabel">Edit Class</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditClassModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="editName" class="form-label">Name</label>
                        <InputText id="editName" class="form-control" @bind-Value="editClassModel.Name" />
                        <ValidationMessage For="@(() => editClassModel.Name)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="editClassCode" class="form-label">Class Code</label>
                        <InputText id="editClassCode" class="form-control" @bind-Value="editClassModel.ClassCode" />
                        <ValidationMessage For="@(() => editClassModel.ClassCode)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="editDescription" class="form-label">Description</label>
                        <InputTextArea id="editDescription" class="form-control" @bind-Value="editClassModel.Description" />
                        <ValidationMessage For="@(() => editClassModel.Description)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrEmpty(editClassModel.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @editClassModel.Error
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditClassModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Manage Class Modal -->
<div class="modal fade" id="manageClassModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="manageClassModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen-md-down modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="manageClassModalLabel">Manage Class: @manageClassModel.ClassName</h5>
                <button type="button" class="btn-close" @onclick="CloseManageClassModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="manageClassTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="teacher-tab" data-bs-toggle="tab" data-bs-target="#teacher-tab-pane" type="button" role="tab" aria-controls="teacher-tab-pane" aria-selected="true">Teacher</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="students-tab" data-bs-toggle="tab" data-bs-target="#students-tab-pane" type="button" role="tab" aria-controls="students-tab-pane" aria-selected="false">Students</button>
                    </li>
                </ul>
                <div class="tab-content p-3 border border-top-0 rounded-bottom" id="manageClassTabContent">
                    <!-- Teacher Tab -->
                    <div class="tab-pane fade show active" id="teacher-tab-pane" role="tabpanel" aria-labelledby="teacher-tab" tabindex="0">
                        <h6 class="mb-3">Assigned Teacher</h6>
                        @if (manageClassModel.CurrentTeacher != null)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">@manageClassModel.CurrentTeacher.Name</h5>
                                    <h6 class="card-subtitle mb-2 text-muted">@manageClassModel.CurrentTeacher.Subject</h6>
                                    <p class="card-text">
                                        <strong>Email:</strong> @manageClassModel.CurrentTeacher.Email<br />
                                        <strong>Phone:</strong> @manageClassModel.CurrentTeacher.PhoneNumber
                                    </p>
                                    <button class="btn btn-warning" @onclick="HandleRemoveTeacher">Remove Teacher</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted mb-3">No teacher assigned to this class.</p>
                        }

                        <h6 class="mb-3">Assign Teacher</h6>
                        <EditForm FormName="assign-teacher" Model="@assignTeacherModel" OnValidSubmit="HandleAssignTeacherSubmit">
                            <DataAnnotationsValidator />
                            <div class="row g-3 align-items-end">
                                <div class="col-md-8">
                                    <label for="teacherId" class="form-label">Teacher</label>
                                    <InputSelect id="teacherId" class="form-select" @bind-Value="assignTeacherModel.TeacherId">
                                        <option value="">Select a teacher...</option>
                                        @if (availableTeachers != null)
                                        {
                                            @foreach (var teacher in availableTeachers)
                                            {
                                                <option value="@teacher.TeacherId">@teacher.Name (@teacher.Subject)</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => assignTeacherModel.TeacherId)" class="text-danger" />
                                </div>
                                <div class="col-md-4">
                                    <button type="submit" class="btn btn-primary w-100">Assign</button>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(assignTeacherModel.Error))
                            {
                                <div class="alert alert-danger mt-3" role="alert">
                                    @assignTeacherModel.Error
                                </div>
                            }
                        </EditForm>
                    </div>

                    <!-- Students Tab -->
                    <div class="tab-pane fade" id="students-tab-pane" role="tabpanel" aria-labelledby="students-tab" tabindex="0">
                        <h6 class="mb-3">Enrolled Students (@(manageClassModel.ClassStudents?.Length ?? 0))</h6>
                        @if (manageClassModel.ClassStudents == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else if (!manageClassModel.ClassStudents.Any())
                        {
                            <p class="text-muted mb-3">No students enrolled in this class.</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Student ID</th>
                                            <th>Email</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var student in manageClassModel.ClassStudents)
                                        {
                                            <tr>
                                                <td>@student.Name</td>
                                                <td>@student.StudentIdNumber</td>
                                                <td>@student.Email</td>
                                                <td>
                                                    <button class="btn btn-sm btn-warning" @onclick="() => HandleRemoveStudent(student.StudentId)">Remove</button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                        <h6 class="mb-3 mt-4">Add Student</h6>
                        <EditForm FormName="add-student" Model="@addStudentModel" OnValidSubmit="HandleAddStudentSubmit">
                            <DataAnnotationsValidator />
                            <div class="row g-3 align-items-end">
                                <div class="col-md-8">
                                    <label for="studentId" class="form-label">Student</label>
                                    <InputSelect id="studentId" class="form-select" @bind-Value="addStudentModel.StudentId">
                                        <option value="">Select a student...</option>
                                        @if (availableStudents != null)
                                        {
                                            @foreach (var student in availableStudents)
                                            {
                                                <option value="@student.StudentId">@student.Name (@student.StudentIdNumber)</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => addStudentModel.StudentId)" class="text-danger" />
                                </div>
                                <div class="col-md-4">
                                    <button type="submit" class="btn btn-primary w-100">Add</button>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(addStudentModel.Error))
                            {
                                <div class="alert alert-danger mt-3" role="alert">
                                    @addStudentModel.Error
                                </div>
                            }
                        </EditForm>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseManageClassModal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    function DisplayAddClassModal(param) {
        var modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('addClassModal'));
        if (param === 'show') {
            modal.show();
            // Ensure buttons are visible and fix positioning
            setTimeout(function() {
                var buttons = document.querySelectorAll('#addClassModal .modal-footer button');
                buttons.forEach(function(button) {
                    button.style.display = 'inline-block';
                });
                
                // Fix modal positioning for small screens
                adjustModalForScreenSize('addClassModal');
            }, 100);
        } else {
            modal.hide();
        }
    }
    
    function DisplayEditClassModal(param) {
        var modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('editClassModal'));
        if (param === 'show') {
            modal.show();
            // Ensure buttons are visible and fix positioning
            setTimeout(function() {
                var buttons = document.querySelectorAll('#editClassModal .modal-footer button');
                buttons.forEach(function(button) {
                    button.style.display = 'inline-block';
                });
                
                // Fix modal positioning for small screens
                adjustModalForScreenSize('editClassModal');
            }, 100);
        } else {
            modal.hide();
        }
    }
    
    function DisplayManageClassModal(param) {
        var modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('manageClassModal'));
        if (param === 'show') {
            modal.show();
            // Initialize tabs when the modal is shown
            var teacherTab = document.getElementById('teacher-tab');
            var studentsTab = document.getElementById('students-tab');
            
            // Add click event listeners to the tabs
            teacherTab.addEventListener('click', function() {
                var teacherPane = document.getElementById('teacher-tab-pane');
                var studentsPane = document.getElementById('students-tab-pane');
                
                // Show teacher tab, hide students tab
                teacherPane.classList.add('show', 'active');
                studentsPane.classList.remove('show', 'active');
                
                // Update active state on tabs
                teacherTab.classList.add('active');
                teacherTab.setAttribute('aria-selected', 'true');
                studentsTab.classList.remove('active');
                studentsTab.setAttribute('aria-selected', 'false');
            });
            
            studentsTab.addEventListener('click', function() {
                var teacherPane = document.getElementById('teacher-tab-pane');
                var studentsPane = document.getElementById('students-tab-pane');
                
                // Show students tab, hide teacher tab
                studentsPane.classList.add('show', 'active');
                teacherPane.classList.remove('show', 'active');
                
                // Update active state on tabs
                studentsTab.classList.add('active');
                studentsTab.setAttribute('aria-selected', 'true');
                teacherTab.classList.remove('active');
                teacherTab.setAttribute('aria-selected', 'false');
            });
            
            // Ensure buttons are visible and fix positioning
            setTimeout(function() {
                var buttons = document.querySelectorAll('#manageClassModal .modal-footer button, #manageClassModal .card button, #manageClassModal .row button');
                buttons.forEach(function(button) {
                    button.style.display = 'inline-block';
                });
                
                // Fix modal positioning for small screens
                adjustModalForScreenSize('manageClassModal');
            }, 100);
        } else {
            modal.hide();
        }
    }
    
    // Helper function to adjust modal display based on screen size
    function adjustModalForScreenSize(modalId) {
        var modalElement = document.getElementById(modalId);
        var modalDialog = modalElement.querySelector('.modal-dialog');
        
        // For very small screens, ensure the modal takes up the full screen
        if (window.innerWidth < 576) {
            modalDialog.style.margin = '0';
            modalDialog.style.maxWidth = '100%';
            modalDialog.style.height = '100%';
            
            // Fix click position issues by ensuring the modal content is properly positioned
            var modalContent = modalDialog.querySelector('.modal-content');
            if (modalContent) {
                modalContent.style.height = '100%';
                modalContent.style.borderRadius = '0';
            }
        } else {
            // Reset for larger screens
            modalDialog.style.margin = '1.75rem auto';
            modalDialog.style.maxWidth = '';
            modalDialog.style.height = '';
            
            var modalContent = modalDialog.querySelector('.modal-content');
            if (modalContent) {
                modalContent.style.height = '';
                modalContent.style.borderRadius = '';
            }
        }
    }
    
    // Add window resize listener to adjust modals when screen size changes
    window.addEventListener('resize', function() {
        var openModals = document.querySelectorAll('.modal.show');
        openModals.forEach(function(modal) {
            adjustModalForScreenSize(modal.id);
        });
    });
</script>

@code {
    private ClassQuery.ClassRecord[]? classes;
    private TeacherQuery.TeacherRecord[]? teachers;
    private StudentQuery.StudentRecord[]? students;
    private TeacherQuery.TeacherRecord[]? availableTeachers;
    private StudentQuery.StudentRecord[]? availableStudents;
    private string nameFilter = "";
    private string classCodeFilter = "";
    private ClassModel classModel = new();
    private EditClassModel editClassModel = new();
    private ManageClassModel manageClassModel = new();
    private AssignTeacherModel assignTeacherModel = new();
    private AddStudentModel addStudentModel = new();
    private Dictionary<Guid, string> teacherNames = new();

    public class ClassModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Class code is required")]
        public string ClassCode { get; set; } = "";

        [Required(ErrorMessage = "Description is required")]
        public string Description { get; set; } = "";

        public string? Error { get; set; }
    }

    public class EditClassModel
    {
        public Guid ClassId { get; set; }

        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Class code is required")]
        public string ClassCode { get; set; } = "";

        [Required(ErrorMessage = "Description is required")]
        public string Description { get; set; } = "";

        public string? Error { get; set; }
    }

    public class ManageClassModel
    {
        public Guid ClassId { get; set; }
        public string ClassName { get; set; } = "";
        public TeacherQuery.TeacherRecord? CurrentTeacher { get; set; }
        public StudentQuery.StudentRecord[]? ClassStudents { get; set; }
    }

    public class AssignTeacherModel
    {
        public Guid ClassId { get; set; }

        [Required(ErrorMessage = "Teacher is required")]
        public string TeacherId { get; set; } = "";

        public string? Error { get; set; }
    }

    public class AddStudentModel
    {
        public Guid ClassId { get; set; }

        [Required(ErrorMessage = "Student is required")]
        public string StudentId { get; set; } = "";

        public string? Error { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadClasses();
        await LoadTeachers();
        await LoadStudents();
    }

    private async Task LoadClasses()
    {
        classes = await ClassApi.GetClassesAsync(nameFilter, classCodeFilter);
    }

    private async Task LoadTeachers()
    {
        teachers = await TeacherApi.GetTeachersAsync();
        teacherNames.Clear();
        if (teachers != null)
        {
            foreach (var teacher in teachers)
            {
                teacherNames[teacher.TeacherId] = $"{teacher.Name} ({teacher.Subject})";
            }
        }
    }

    private async Task LoadStudents()
    {
        students = await StudentApi.GetStudentsAsync();
    }

    private string GetTeacherName(Guid teacherId)
    {
        if (teacherNames.TryGetValue(teacherId, out var name))
        {
            return name;
        }
        return "Unknown Teacher";
    }

    private async Task ApplyFilters()
    {
        await LoadClasses();
    }

    private async Task OpenAddClassModal()
    {
        classModel = new ClassModel();
        await JsRuntime.InvokeVoidAsync("DisplayAddClassModal", "show");
    }

    private async Task CloseAddClassModal()
    {
        classModel = new ClassModel();
        await JsRuntime.InvokeVoidAsync("DisplayAddClassModal", "hide");
    }

    private async Task OpenEditClassModal(ClassQuery.ClassRecord classItem)
    {
        editClassModel = new EditClassModel
        {
            ClassId = classItem.ClassId,
            Name = classItem.Name,
            ClassCode = classItem.ClassCode,
            Description = classItem.Description
        };
        await JsRuntime.InvokeVoidAsync("DisplayEditClassModal", "show");
    }

    private async Task CloseEditClassModal()
    {
        editClassModel = new EditClassModel();
        await JsRuntime.InvokeVoidAsync("DisplayEditClassModal", "hide");
    }

    private async Task OpenManageClassModal(ClassQuery.ClassRecord classItem)
    {
        manageClassModel = new ManageClassModel
        {
            ClassId = classItem.ClassId,
            ClassName = classItem.Name
        };

        assignTeacherModel = new AssignTeacherModel
        {
            ClassId = classItem.ClassId
        };

        addStudentModel = new AddStudentModel
        {
            ClassId = classItem.ClassId
        };

        await LoadClassTeacher(classItem);
        await LoadClassStudents(classItem.ClassId);
        await UpdateAvailableTeachers(classItem.TeacherId);
        await UpdateAvailableStudents(classItem.StudentIds);
        await JsRuntime.InvokeVoidAsync("DisplayManageClassModal", "show");
    }

    private async Task CloseManageClassModal()
    {
        manageClassModel = new ManageClassModel();
        assignTeacherModel = new AssignTeacherModel();
        addStudentModel = new AddStudentModel();
        await JsRuntime.InvokeVoidAsync("DisplayManageClassModal", "hide");
    }

    private async Task LoadClassTeacher(ClassQuery.ClassRecord classItem)
    {
        if (classItem.TeacherId.HasValue && teachers != null)
        {
            manageClassModel.CurrentTeacher = teachers.FirstOrDefault(t => t.TeacherId == classItem.TeacherId.Value);
        }
        else
        {
            manageClassModel.CurrentTeacher = null;
        }
    }

    private async Task LoadClassStudents(Guid classId)
    {
        manageClassModel.ClassStudents = await StudentApi.GetStudentsByClassIdAsync(classId);
    }

    private async Task UpdateAvailableTeachers(Guid? currentTeacherId)
    {
        if (teachers == null)
        {
            availableTeachers = Array.Empty<TeacherQuery.TeacherRecord>();
            return;
        }

        availableTeachers = currentTeacherId.HasValue
            ? teachers.Where(t => t.TeacherId != currentTeacherId.Value).ToArray()
            : teachers;
    }

    private async Task UpdateAvailableStudents(Guid[] enrolledStudentIds)
    {
        if (students == null)
        {
            availableStudents = Array.Empty<StudentQuery.StudentRecord>();
            return;
        }

        var enrolledStudentIdSet = new HashSet<Guid>(enrolledStudentIds);
        availableStudents = students
            .Where(s => !enrolledStudentIdSet.Contains(s.StudentId) && s.ClassId == null)
            .ToArray();
    }

    private async Task HandleAddClassSubmit()
    {
        try
        {
            await ClassApi.CreateClassAsync(
                classModel.Name,
                classModel.ClassCode,
                classModel.Description);

            await LoadClasses();
            await CloseAddClassModal();
        }
        catch (Exception ex)
        {
            classModel.Error = $"Failed to add class: {ex.Message}";
        }
    }

    private async Task HandleEditClassSubmit()
    {
        try
        {
            await ClassApi.UpdateClassAsync(
                editClassModel.ClassId,
                editClassModel.Name,
                editClassModel.ClassCode,
                editClassModel.Description);

            await LoadClasses();
            await CloseEditClassModal();
        }
        catch (Exception ex)
        {
            editClassModel.Error = $"Failed to update class: {ex.Message}";
        }
    }

    private async Task HandleDeleteClass(Guid classId)
    {
        try
        {
            await ClassApi.DeleteClassAsync(classId);
            await LoadClasses();
        }
        catch (Exception ex)
        {
            // Show error message
            Console.Error.WriteLine($"Error deleting class: {ex.Message}");
        }
    }

    private async Task HandleAssignTeacherSubmit()
    {
        try
        {
            if (Guid.TryParse(assignTeacherModel.TeacherId, out var teacherId))
            {
                await ClassApi.AssignTeacherToClassAsync(assignTeacherModel.ClassId, teacherId);
                
                // Reload data
                await LoadClasses();
                var updatedClass = classes?.FirstOrDefault(c => c.ClassId == assignTeacherModel.ClassId);
                if (updatedClass != null)
                {
                    await LoadClassTeacher(updatedClass);
                    await UpdateAvailableTeachers(updatedClass.TeacherId);
                }
                
                assignTeacherModel.TeacherId = "";
                assignTeacherModel.Error = null;
            }
            else
            {
                assignTeacherModel.Error = "Invalid teacher selection";
            }
        }
        catch (Exception ex)
        {
            assignTeacherModel.Error = $"Failed to assign teacher: {ex.Message}";
        }
    }

    private async Task HandleRemoveTeacher()
    {
        try
        {
            await ClassApi.RemoveTeacherFromClassAsync(manageClassModel.ClassId);
            
            // Reload data
            await LoadClasses();
            var updatedClass = classes?.FirstOrDefault(c => c.ClassId == manageClassModel.ClassId);
            if (updatedClass != null)
            {
                await LoadClassTeacher(updatedClass);
                await UpdateAvailableTeachers(updatedClass.TeacherId);
            }
        }
        catch (Exception ex)
        {
            // Show error message
            Console.Error.WriteLine($"Error removing teacher: {ex.Message}");
        }
    }

    private async Task HandleAddStudentSubmit()
    {
        try
        {
            if (Guid.TryParse(addStudentModel.StudentId, out var studentId))
            {
                // Update both sides of the relationship
                await ClassApi.AddStudentToClassAsync(addStudentModel.ClassId, studentId);
                await StudentApi.AssignStudentToClassAsync(studentId, addStudentModel.ClassId);
                
                // Reload data
                await LoadClasses();
                await LoadClassStudents(addStudentModel.ClassId);
                var updatedClass = classes?.FirstOrDefault(c => c.ClassId == addStudentModel.ClassId);
                if (updatedClass != null)
                {
                    await UpdateAvailableStudents(updatedClass.StudentIds);
                }
                
                addStudentModel.StudentId = "";
                addStudentModel.Error = null;
            }
            else
            {
                addStudentModel.Error = "Invalid student selection";
            }
        }
        catch (Exception ex)
        {
            addStudentModel.Error = $"Failed to add student: {ex.Message}";
        }
    }

    private async Task HandleRemoveStudent(Guid studentId)
    {
        try
        {
            // Update both sides of the relationship
            await ClassApi.RemoveStudentFromClassAsync(manageClassModel.ClassId, studentId);
            await StudentApi.RemoveStudentFromClassAsync(studentId);
            
            // Reload data
            await LoadClasses();
            await LoadClassStudents(manageClassModel.ClassId);
            var updatedClass = classes?.FirstOrDefault(c => c.ClassId == manageClassModel.ClassId);
            if (updatedClass != null)
            {
                await UpdateAvailableStudents(updatedClass.StudentIds);
            }
        }
        catch (Exception ex)
        {
            // Show error message
            Console.Error.WriteLine($"Error removing student: {ex.Message}");
        }
    }
}
