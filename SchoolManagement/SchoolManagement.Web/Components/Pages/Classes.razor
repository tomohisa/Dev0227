@page "/classes"
@attribute [StreamRendering(true)]
@using SchoolManagement.Domain
@inherits ClassesBase

<PageTitle>Classes</PageTitle>

<h1>Classes</h1>

<div class="mb-3">
    <div class="row g-3">
        <div class="col-md-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by name" @bind="nameFilter" @bind:event="oninput" />
                <button class="btn btn-outline-secondary" type="button" @onclick="ApplyFilters">Search</button>
            </div>
        </div>
        <div class="col-md-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by class code" @bind="classCodeFilter" @bind:event="oninput" />
                <button class="btn btn-outline-secondary" type="button" @onclick="ApplyFilters">Search</button>
            </div>
        </div>
        <div class="col-md-4">
            <button class="btn btn-primary" @onclick="OpenAddClassModal">Add New Class</button>
        </div>
    </div>
</div>

<h3>Class List</h3>

@if (classes == null)
{
    <p><em>Loading...</em></p>
}
else if (!classes.Any())
{
    <p>No classes found. Add a new class to get started.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Class Code</th>
                    <th>Description</th>
                    <th>Teacher</th>
                    <th>Students</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var classItem in classes)
                {
                    <tr>
                        <td>@classItem.Name</td>
                        <td>@classItem.ClassCode</td>
                        <td>@classItem.Description</td>
                        <td>
                            @if (classItem.TeacherId.HasValue)
                            {
                                var teacherName = GetTeacherName(classItem.TeacherId.Value);
                                @teacherName
                            }
                            else
                            {
                                <span class="text-muted">Not assigned</span>
                            }
                        </td>
                        <td>@classItem.StudentIds.Length</td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-primary" @onclick="() => OpenEditClassModal(classItem)">Edit</button>
                                <button class="btn btn-sm btn-info" @onclick="() => OpenManageClassModal(classItem)">Manage</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => HandleDeleteClass(classItem.ClassId)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<AddClassModal 
    ClassModel="classModel"
    OnCloseModal="CloseAddClassModal"
    OnAddClassSubmit="HandleAddClassSubmit" />

<EditClassModal 
    EditClassModel="editClassModel"
    OnCloseModal="CloseEditClassModal"
    OnEditClassSubmit="HandleEditClassSubmit" />

<ManageClassModal 
    ManageClassModel="manageClassModel"
    AssignTeacherModel="assignTeacherModel"
    AddStudentModel="addStudentModel"
    AvailableTeachers="availableTeachers"
    AvailableStudents="availableStudents"
    OnCloseModal="CloseManageClassModal"
    OnRemoveTeacher="HandleRemoveTeacher"
    OnAssignTeacherSubmit="HandleAssignTeacherSubmit"
    OnRemoveStudentClicked="HandleRemoveStudent"
    OnAddStudentSubmit="HandleAddStudentSubmit" />

<ClassesJavaScript />
